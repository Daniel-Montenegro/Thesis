"""
==================================
 LIBRERIAS
===================================
"""

import numpy as np
from scipy.optimize import curve_fit
from scipy import stats
import matplotlib.pyplot as plt
import gadget 
import arepo

"""
===================================
    ->Lectura de los autovectores
"""

from struct import *
import sys
import os

#===========================================

"""
***********************************
    --> Lectura snapshots

***********************************
"""
print("-----------------------------------\n")
print("Inicia asignacion de los snapshots\n")


#Sn_bh = gadget.Snapshot('../../Data/snap_015.0.hdf5', parttype=[5], combineFiles=True, verbose=True)

Sn_bh = gadget.Snapshot('../../Data/snap_015.0.hdf5', parttype=[5])



#====> Asignacion de datos


Spin_bh=Sn_bh.BH_SpinOrientation #Spin de los black hole
r_bh = Sn_bh.Coordinates  # cordanada en x,y,z
Mass_bh = Sn_bh.BH_Mass*10e10/0.7
Mass_halo = Sn_bh.Masses
print("-----------------------------------\n")
print("Termina asignacion de los snapshots\n")

#===========================================

"""
***********************************
    --> Lectura datos Tweb

***********************************
"""
print("---------------------------------\n")
print("Inicia lectura datos Tweb\n")

folder = '/home/daniel/Documentos/Tesis/Data/Tweb_512/'
file = 'snap_015.s1.00.eigenvec_1'

print("Reading eigenvector file")
f = open("%s%s"%(folder,file), "rb")
#f = open("../Bolshoi/Eigenvec_s1_1", "rb")
dumb = f.read(38)

dumb = f.read(4)
n_x = f.read(4)
n_y = f.read(4)
n_z = f.read(4)
nodes = f.read(4)
x0 = f.read(4)
y0 = f.read(4)
z0 = f.read(4)
dx = f.read(4)
dy = f.read(4)
dz = f.read(4)
dumb = f.read(4)

n_x = (unpack('i', n_x))[0]
n_y = (unpack('i', n_y))[0]
n_z = (unpack('i', n_z))[0]
nodes = (unpack('i', nodes))[0]
dx = (unpack('f', dx))[0]
dy = (unpack('f', dy))[0]
dz = (unpack('f', dz))[0]
x0 = (unpack('f', x0))[0]
y0 = (unpack('f', y0))[0]
z0 = (unpack('f', z0))[0]
print(n_x, n_y, n_z, nodes, dx, dy, dz)

total_nodes = 3 * n_x * n_y *n_z
dumb = f.read(4)
array_data = f.read(total_nodes*4)
dumb = f.read(4)
format_s = str(total_nodes)+'f'
array_data = unpack(format_s, array_data)
f.close()
array_data  = np.array(array_data)
new_array_data = np.reshape(array_data, (3,n_x,n_y,n_z), order='F')
print("---------------------------------\n")
print("Termina lectura datos Tweb\n")


#===========================================

"""
***********************************
    --> Funcion que devuelve el valor
        de la celda dependiendo de su 
        posicion en x,y,z
***********************************
"""

def Eigen_vec(r):
    """
    Esta funcion retorna el valor del auntoVector 
    correspondiente a las coordenadas r(x,y,z)
    """
        
    long_box= 25e3 #longitud caja
    
    dl = n_x/long_box #tamano de cada celda = numero_celdas/long_caja
    
    i=np.int(r[0]*dl)
    j=np.int(r[1]*dl)
    k=np.int(r[2]*dl)
    """
    eigen_vec_r =np.array([new_array_data[0,i,j,k],\
                            new_array_data[1,i,j,k],\
                            new_array_data[2,i,j,k]])
    """
    eigen_vec_r = [new_array_data[0,i,j,k],\
                            new_array_data[1,i,j,k],\
                            new_array_data[2,i,j,k]]

    

    return eigen_vec_r


#===========================================

"""
******************************************
 Asignacion de dek valor de autovec
 y calculo del cos(theta)
      --->En seccion se asigna el valor del
          autovec(r) dependiendo del radio.
          Ademas, se calcula el producto punto
          y con ello tener el cos(theta)
******************************************
"""
print("---------------------------------\n")
print("Inicia calculo de cos(theta)\n")

Mag_EigenVec=[]
Mag_Spin_bh=[]
Dot=[]
EigenVec=[]
cos_theta=[]
for i in range(len(r_bh)):

    EigenVec.append(Eigen_vec(r_bh[i]))
    
    Mag_EigenVec.append(np.linalg.norm(EigenVec[i])) ##magnitud del autovector
    Mag_Spin_bh.append(np.linalg.norm(Spin_bh[i]))       ##magnitud del Spin_bh
    Dot.append(np.vdot(EigenVec[i],Spin_bh[i])) ##Productopunto del autovec y spin_bh
    cos_theta.append(Dot[i]/(Mag_EigenVec[i]*Mag_Spin_bh[i])) 

print("---------------------------------\n")
print("Termina calculo de cos(theta)\n")




#===========================================

"""
******************************************
Graficas
******************************************
"""
print("---------------------------------\n")
print("Inicia Grafica\n")


plt.plot(np.log10(Mass_bh),cos_theta,'.')
plt.xlabel('$\log_{10}(M_{bh})[M_{\odot}]$')
plt.ylabel('$\cos( \Theta ) $')
plt.savefig('Alination_Enviroment.png')

print("---------------------------------\n")
print("Termina Grafica\n")
